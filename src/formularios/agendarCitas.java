/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package formularios;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;

import Citas.cita;
import Citas.gestorCitas;

import javax.swing.GroupLayout.Alignment;
import javax.swing.LayoutStyle.ComponentPlacement;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;

@SuppressWarnings("serial")
public class agendarCitas extends javax.swing.JFrame {

     private DefaultTableModel modeloTabla;
    
    public agendarCitas() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel2.setHorizontalAlignment(SwingConstants.CENTER);
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel4.setHorizontalAlignment(SwingConstants.CENTER);
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla2 = new javax.swing.JTable();
        nombre = new javax.swing.JTextField();
        servicio = new javax.swing.JTextField();
        fecha = new javax.swing.JTextField();
        agendar = new javax.swing.JButton();
        eliminar = new javax.swing.JButton();
        pagar = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel5.setHorizontalAlignment(SwingConstants.CENTER);
        jMenuBar1 = new javax.swing.JMenuBar();
        menu = new javax.swing.JMenu();
        volver = new javax.swing.JMenuItem();
        
        modeloTabla = new DefaultTableModel();
        Object[][] filas = {};
        Object[] columnas = {"id", "cliente", "servicio", "fecha", "precio", "id empleado"};
        modeloTabla = new DefaultTableModel(filas, columnas);

        tabla2.setModel(modeloTabla);
        
        buscarTabla();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("agenda");

        jLabel2.setText("servicio");

        jLabel3.setText("Cliente");

        jLabel4.setText("fecha");

        jScrollPane1.setViewportView(tabla2);

        nombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nombreActionPerformed(evt);
            }
        });

        servicio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                servicioActionPerformed(evt);
            }
        });

        fecha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fechaActionPerformed(evt);
            }
        });

        agendar.setText("agendar");
        agendar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agendarActionPerformed(evt);
            }
        });

        eliminar.setText("cancelar cita");
        eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarActionPerformed(evt);
            }
        });

        pagar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                metododepagoActionPerformed(evt);
            }
        });

        jLabel5.setText("precio");

        menu.setText("menu");

        volver.setText("volver");
        volver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverActionPerformed(evt);
            }
        });
        menu.add(volver);

        jMenuBar1.add(menu);

        setJMenuBar(jMenuBar1);
        
        JLabel lblNewLabel = new JLabel("id empleado");
        lblNewLabel.setHorizontalAlignment(SwingConstants.CENTER);
        
        txtEm = new JTextField();
        txtEm.setColumns(10);
        
        btnEditar = new JButton("Editar");
        btnEditar.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                if (filaEditar != -1) {
                    String id = txtID.getText();
                    String nuevoCliente = nombre.getText();
                    String nuevoServicio = servicio.getText();
                    String nuevaFecha = fecha.getText();
                    String nuevoPrecio = pagar.getText();
                    String nuevoEmpleado = txtEm.getText();

                    if (nuevoCliente.isEmpty() || nuevoServicio.isEmpty() || nuevaFecha.isEmpty() || nuevoPrecio.isEmpty() || nuevoEmpleado.isEmpty()) {
                        JOptionPane.showMessageDialog(null, "Por favor, complete todos los campos");
                    } else {
                        try {
                            gestorCitas gestorCita = new gestorCitas();

                            // Verificar si el empleado existe antes de actualizar la cita
                            boolean actualizacionExitosa = gestorCita.actualizarCita(Integer.parseInt(id), nuevoCliente, nuevoServicio, nuevaFecha, nuevoPrecio, Integer.parseInt(nuevoEmpleado));

                            if (actualizacionExitosa) {
                                buscarTabla();
                                JOptionPane.showMessageDialog(null, "Cita actualizada correctamente");
                            } else {
                                JOptionPane.showMessageDialog(null, "Error al actualizar la cita");
                            }
                        } catch (NumberFormatException ex) {
                            JOptionPane.showMessageDialog(null, "Ingrese un valor numérico válido para el precio");
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Por favor, seleccione una cita para editar");
                }
            }
        });




        
        lblNewLabel_1 = new JLabel("ID");
        
        txtID = new JTextField();
        txtID.setEditable(false);
        txtID.setColumns(10);
        
        btnCompletar = new JButton("completar");
        btnCompletar.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                if (filaEditar != -1) {
                    String idCita = txtID.getText();
                    String pago = pagar.getText();
                    
                    if (!idCita.isEmpty()) {
                        gestorCitas gestorCita = new gestorCitas();
						boolean citaYaCompletada = gestorCita.estaCompletada(Integer.parseInt(idCita));
                        
                        if (citaYaCompletada) {
                            JOptionPane.showMessageDialog(null, "La cita ya esta completada. No se puede completar nuevamente.");
                        } else {
                            double precio = Double.parseDouble(pago); 
                            boolean completarExitoso = gestorCita.completarCita(Integer.parseInt(idCita), precio);

                            if (completarExitoso) {
                                JOptionPane.showMessageDialog(null, "Cita completada con exito.");
                                buscarTabla();
                            } else {
                                JOptionPane.showMessageDialog(null, "Error al completar la cita.");
                            }
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "No se ha seleccionado ninguna cita para completar.");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "No se ha seleccionado ninguna fila.");
                }
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        layout.setHorizontalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(layout.createSequentialGroup()
        			.addGroup(layout.createParallelGroup(Alignment.LEADING)
        				.addGroup(layout.createSequentialGroup()
        					.addContainerGap()
        					.addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        					.addPreferredGap(ComponentPlacement.RELATED)
        					.addGroup(layout.createParallelGroup(Alignment.LEADING)
        						.addComponent(btnCompletar, GroupLayout.DEFAULT_SIZE, 116, Short.MAX_VALUE)
        						.addComponent(eliminar, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        				.addGroup(layout.createSequentialGroup()
        					.addGroup(layout.createParallelGroup(Alignment.TRAILING)
        						.addGroup(layout.createSequentialGroup()
        							.addGap(23)
        							.addComponent(lblNewLabel_1)
        							.addGap(36)
        							.addComponent(jLabel3, GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE)
        							.addPreferredGap(ComponentPlacement.UNRELATED)
        							.addComponent(jLabel2, GroupLayout.DEFAULT_SIZE, 78, Short.MAX_VALUE)
        							.addPreferredGap(ComponentPlacement.RELATED)
        							.addGroup(layout.createParallelGroup(Alignment.LEADING)
        								.addGroup(layout.createSequentialGroup()
        									.addGap(47)
        									.addComponent(jLabel1, GroupLayout.DEFAULT_SIZE, 52, Short.MAX_VALUE)
        									.addGap(53))
        								.addGroup(layout.createSequentialGroup()
        									.addGap(6)
        									.addComponent(jLabel4, GroupLayout.PREFERRED_SIZE, 67, GroupLayout.PREFERRED_SIZE)
        									.addPreferredGap(ComponentPlacement.UNRELATED)
        									.addComponent(jLabel5, GroupLayout.PREFERRED_SIZE, 64, GroupLayout.PREFERRED_SIZE))))
        						.addGroup(layout.createSequentialGroup()
        							.addGap(12)
        							.addComponent(txtID, GroupLayout.PREFERRED_SIZE, 31, GroupLayout.PREFERRED_SIZE)
        							.addPreferredGap(ComponentPlacement.RELATED)
        							.addComponent(nombre, GroupLayout.PREFERRED_SIZE, 71, GroupLayout.PREFERRED_SIZE)
        							.addPreferredGap(ComponentPlacement.RELATED)
        							.addComponent(servicio, GroupLayout.PREFERRED_SIZE, 71, GroupLayout.PREFERRED_SIZE)
        							.addPreferredGap(ComponentPlacement.UNRELATED)
        							.addComponent(fecha, GroupLayout.PREFERRED_SIZE, 74, GroupLayout.PREFERRED_SIZE)
        							.addPreferredGap(ComponentPlacement.RELATED)
        							.addComponent(pagar, GroupLayout.PREFERRED_SIZE, 64, GroupLayout.PREFERRED_SIZE)
        							.addPreferredGap(ComponentPlacement.RELATED)))
        					.addGap(10)
        					.addGroup(layout.createParallelGroup(Alignment.TRAILING)
        						.addComponent(lblNewLabel, GroupLayout.DEFAULT_SIZE, 77, Short.MAX_VALUE)
        						.addComponent(txtEm, GroupLayout.DEFAULT_SIZE, 77, Short.MAX_VALUE))
        					.addPreferredGap(ComponentPlacement.RELATED)
        					.addComponent(agendar)
        					.addPreferredGap(ComponentPlacement.RELATED)
        					.addComponent(btnEditar)))
        			.addGap(45))
        );
        layout.setVerticalGroup(
        	layout.createParallelGroup(Alignment.LEADING)
        		.addGroup(layout.createSequentialGroup()
        			.addGap(15)
        			.addComponent(jLabel1)
        			.addGap(35)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(jLabel4)
        				.addComponent(jLabel5)
        				.addComponent(lblNewLabel)
        				.addComponent(jLabel2)
        				.addComponent(jLabel3)
        				.addComponent(lblNewLabel_1))
        			.addGap(8)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(agendar)
        				.addComponent(txtEm, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        				.addComponent(pagar, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        				.addComponent(fecha, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        				.addComponent(servicio, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        				.addComponent(nombre, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        				.addComponent(txtID, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
        				.addComponent(btnEditar))
        			.addPreferredGap(ComponentPlacement.UNRELATED)
        			.addGroup(layout.createParallelGroup(Alignment.BASELINE)
        				.addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 229, GroupLayout.PREFERRED_SIZE)
        				.addGroup(layout.createSequentialGroup()
        					.addComponent(eliminar)
        					.addGap(15)
        					.addComponent(btnCompletar)))
        			.addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        getContentPane().setLayout(layout);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fechaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fechaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fechaActionPerformed

    private void nombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nombreActionPerformed

    private void servicioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_servicioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_servicioActionPerformed

    private void metododepagoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_metododepagoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_metododepagoActionPerformed

    private void agendarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agendarActionPerformed
        String Nombre1 = nombre.getText();
        String Servicio1 = servicio.getText();
        String Fecha1 = fecha.getText();
        String num = pagar.getText();
        String empleado = txtEm.getText();

        if (Nombre1.isEmpty() || Servicio1.isEmpty() || Fecha1.isEmpty() || num.isEmpty() || empleado.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Por favor, completa todos los campos");
        } else {
            try {
                Double Metododepago1 = Double.parseDouble(num);
                int idEm = Integer.parseInt(empleado);

                cita citas = new cita(Nombre1, Servicio1, Fecha1, Metododepago1, idEm);

                gestorCitas gestorCita = new gestorCitas();
                boolean insercionExitosa = gestorCita.insertarCita(citas);

                if (insercionExitosa) {
                    modeloTabla.addRow(new Object[]{Nombre1, Servicio1, Fecha1, Metododepago1, empleado});
                    buscarTabla();
                    JOptionPane.showMessageDialog(this, "Se agrego la cita de: " + Nombre1 + "\n Para: " + Fecha1);
                    txtID.setText("");
                    nombre.setText("");
                    servicio.setText("");
                    fecha.setText("");
                    pagar.setText("");
                    txtEm.setText("");
                } else {
                    JOptionPane.showMessageDialog(this, "Error al agregar la cita");
                }
            } catch (NumberFormatException ex) {
                JOptionPane.showMessageDialog(this, "Ingrese un valor numerico valido para el pago");
            }
        }
    }//GEN-LAST:event_agendarActionPerformed

    private void eliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarActionPerformed
        // TODO add your handling code here:
    	if (filaEditar != -1) { 
            String idCitaEliminar = txtID.getText();

            if (!idCitaEliminar.isEmpty()) { 
                int idCita = Integer.parseInt(idCitaEliminar);

                gestorCitas gestorCita = new gestorCitas();
                boolean eliminacionExitosa = gestorCita.eliminarCita(idCita); 

                if (eliminacionExitosa) {
                    JOptionPane.showMessageDialog(this, "Se eliminó la cita con ID: " + idCita);
                    txtID.setText("");
                    nombre.setText("");
                    servicio.setText("");
                    fecha.setText("");
                    pagar.setText("");
                    txtEm.setText("");
                    buscarTabla();
                } else {
                    JOptionPane.showMessageDialog(this, "Error al eliminar la cita");
                }
            } else {
                JOptionPane.showMessageDialog(this, "No se ha seleccionado ninguna cita para eliminar");
            }
        } else {
            JOptionPane.showMessageDialog(this, "No se ha seleccionado ninguna fila");
        }

    	
    }//GEN-LAST:event_eliminarActionPerformed

    private void volverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverActionPerformed
       
    	ForEmpleado volver = new ForEmpleado();
        volver.setLocationRelativeTo(null);
        volver.setVisible(true);
        
        this.dispose();
        
    }//GEN-LAST:event_volverActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
    	agendarCitas n = new agendarCitas();
    	n.setVisible(true);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton agendar;
    private javax.swing.JButton eliminar;
    private javax.swing.JTextField fecha;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenu menu;
    private javax.swing.JTextField pagar;
    private javax.swing.JTextField nombre;
    private javax.swing.JTextField servicio;
    private javax.swing.JTable tabla2;
    private javax.swing.JMenuItem volver;
    private JTextField txtEm;
    private JButton btnEditar;
    private int filaEditar = -1;
    private JLabel lblNewLabel_1;
    private JTextField txtID;
    private JButton btnCompletar;
    
    private void buscarTabla() {
	    try {
	        Class.forName("com.mysql.cj.jdbc.Driver");
	        java.sql.Connection conexion = DriverManager.getConnection("jdbc:mysql://localhost:3306/usuarios", "root", "qwerty");
	        Statement statement = conexion.createStatement();

	        ResultSet resultSet = statement.executeQuery("SELECT id, cliente, servicio, fecha, precio, idEmpleado FROM agendarcita");
	        
	        modeloTabla.setRowCount(0);

	        while (resultSet.next()) {
	            String ids = resultSet.getString("id");
	            String clienteN = resultSet.getString("cliente");
	            String servi = resultSet.getString("servicio");
	            String date = resultSet.getString("fecha");
	            String pago = resultSet.getString("precio");
	            String emple = resultSet.getString("idEmpleado");
	            modeloTabla.addRow(new Object[]{ids, clienteN, servi, date, pago, emple});
	        }

	        conexion.close();
	    } catch (ClassNotFoundException | SQLException e) {
	        e.printStackTrace();
	    }
	    
	    tabla2.addMouseListener(new MouseAdapter() {
	        @Override
	        public void mouseClicked(MouseEvent e) {
	            filaEditar = tabla2.getSelectedRow();
	            if (filaEditar != -1) {
	            	String ids = modeloTabla.getValueAt(filaEditar, 0).toString();
	                String cli = modeloTabla.getValueAt(filaEditar, 1).toString();
	                String servi = modeloTabla.getValueAt(filaEditar, 2).toString();
	                String date = modeloTabla.getValueAt(filaEditar, 3).toString();
	                String pago = modeloTabla.getValueAt(filaEditar, 4).toString();
	                String emple = modeloTabla.getValueAt(filaEditar, 5).toString();

	                txtID.setText(ids);
	                nombre.setText(cli);
	                servicio.setText(servi);
	                fecha.setText(date);
	                pagar.setText(pago);
	                txtEm.setText(emple);
	            }
	        }
	    });
	}
}
